// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define ArgumentsFunc(arg) [](decltype(arg)::ConvertFuncParamType value) -> decltype(arg)::ConvertResult
#define ArgumentsValue(arg) args.Value<decltype(arg)::ValueType>(arg)
#define ArgumentOption(option, __VA_ARGS__) enum class option { __VA_ARGS__ }; const auto __##option##_map__ = (([&, i = 0](std::string str) mutable { str.erase(std::remove(str.begin(), str.end(), ' '), str.end()); std::unordered_map<option, const std::string> res{}; std::string item; std::stringstream stringStream(str); while (std::getline(stringStream, item, ',')) res.emplace(static_cast<option>(i++), item); return res; })(#__VA_ARGS__)); std::string ToString(const option& in) { return __##option##_map__.at(in); } option To##option(const std::string& in) { for (const auto& [k, v] : __##option##_map__) if (v == in) return k; } std::string option##Desc(const std::string& defaultValue = "") { std::ostringstream oss{}; oss << "["; for (const auto kv : __##option##_map__) { const auto sm = kv.second; if (sm == defaultValue) { oss << "(" << sm << ")|"; continue; } oss << sm << "|"; } auto res = oss.str(); res[res.length() - 1] = ']'; return res; }
#define ArgumentOptionCpp(option, __VA_ARGS__) std::string ToString(const option& in) { return __##option##_map__.at(in); } option To##option(const std::string& in) { for (const auto& [k, v] : __##option##_map__) if (v == in) return k; } std::string option##Desc(const std::string& defaultValue) { std::ostringstream oss{}; oss << "["; for (const auto kv : __##option##_map__) { const auto sm = kv.second; if (sm == defaultValue) { oss << "(" << sm << ")|"; continue; } oss << sm << "|"; } auto res = oss.str(); res[res.length() - 1] = ']'; return res; }
